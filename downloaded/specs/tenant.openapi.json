{
  "components": {
    "schemas": {
      "protobufAny": {
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
        "properties": {
          "type_url": {
            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
            "type": "string"
          },
          "value": {
            "description": "Must be a valid serialized protocol buffer of the above specified type.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "protobufNullValue": {
        "default": "NULL_VALUE",
        "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value.",
        "enum": [
          "NULL_VALUE"
        ],
        "type": "string"
      },
      "rpcStatus": {
        "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of\n[google.rpc.Code][google.rpc.Code].",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
            "items": {
              "$ref": "#/components/schemas/protobufAny"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized\nby the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Account": {
        "properties": {
          "default_tenant": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "personal_tenant": {
            "$ref": "#/components/schemas/v1Tenant"
          },
          "registration_date": {
            "format": "int64",
            "type": "string"
          },
          "tenants": {
            "items": {
              "$ref": "#/components/schemas/v1Tenant"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1BuildInfo": {
        "properties": {
          "arch": {
            "type": "string"
          },
          "commit": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1ClaimTenantRequest": {
        "properties": {
          "default_artifacts": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "personal": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "v1ClaimTenantResponse": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1CloneRepoResponse": {
        "type": "object"
      },
      "v1ConfigElement": {
        "properties": {
          "description": {
            "type": "string"
          },
          "generated": {
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "json_schema": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/v1ConfigElementKind"
          },
          "mode": {
            "$ref": "#/components/schemas/v1DisplayMode"
          },
          "name": {
            "type": "string"
          },
          "read_only": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/v1ConfigElementType"
          },
          "usage": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1ConfigElementKind": {
        "default": "CONFIG_ELEMENT_KIND_UNKNOWN",
        "enum": [
          "CONFIG_ELEMENT_KIND_UNKNOWN",
          "CONFIG_ELEMENT_KIND_ATTRIBUTE",
          "CONFIG_ELEMENT_KIND_SECRET",
          "CONFIG_ELEMENT_KIND_CERTIFICATE"
        ],
        "type": "string"
      },
      "v1ConfigElementType": {
        "default": "CONFIG_ELEMENT_TYPE_UNKNOWN",
        "enum": [
          "CONFIG_ELEMENT_TYPE_UNKNOWN",
          "CONFIG_ELEMENT_TYPE_STRING",
          "CONFIG_ELEMENT_TYPE_INTEGER",
          "CONFIG_ELEMENT_TYPE_BOOLEAN",
          "CONFIG_ELEMENT_TYPE_JSON"
        ],
        "type": "string"
      },
      "v1Connection": {
        "properties": {
          "config": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/v1ProviderKind"
          },
          "last_verification_at": {
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/v1Metadata"
          },
          "name": {
            "type": "string"
          },
          "provider_id": {
            "type": "string"
          },
          "system": {
            "type": "boolean"
          },
          "verified": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "v1ConnectionAvailableResponse": {
        "properties": {
          "availability": {
            "$ref": "#/components/schemas/v1NameAvailability"
          },
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1ConnectionType": {
        "default": "CONNECTION_TYPE_UNKNOWN",
        "enum": [
          "CONNECTION_TYPE_UNKNOWN",
          "CONNECTION_TYPE_SIMPLE",
          "CONNECTION_TYPE_OAUTH"
        ],
        "type": "string"
      },
      "v1CreateConnectionResponse": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1CreatePolicyBuilderResponse": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1CreatePolicyRefResponse": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1CreateRegistryRepoResponse": {
        "type": "object"
      },
      "v1CreateRepoResponse": {
        "type": "object"
      },
      "v1DeleteConnectionResponse": {
        "properties": {
          "results": {}
        },
        "type": "object"
      },
      "v1DeletePolicyBuilderResponse": {
        "properties": {
          "result": {}
        },
        "type": "object"
      },
      "v1DeletePolicyRefResponse": {
        "properties": {
          "result": {}
        },
        "type": "object"
      },
      "v1DeleteRegistryRepoResponse": {
        "type": "object"
      },
      "v1DisplayMode": {
        "default": "DISPLAY_MODE_UNKNOWN",
        "enum": [
          "DISPLAY_MODE_UNKNOWN",
          "DISPLAY_MODE_NORMAL",
          "DISPLAY_MODE_MASKED",
          "DISPLAY_MODE_HIDDEN"
        ],
        "type": "string"
      },
      "v1Fields": {
        "properties": {
          "mask": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1GetAccountResponse": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/v1Account"
          }
        },
        "type": "object"
      },
      "v1GetConnectionResponse": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/v1Connection"
          }
        },
        "type": "object"
      },
      "v1GetInvitesResponse": {
        "properties": {
          "invites": {
            "items": {
              "$ref": "#/components/schemas/v1Invite"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1GetProfileResponse": {
        "properties": {
          "repos": {
            "items": {
              "$ref": "#/components/schemas/v1Repo"
            },
            "type": "array"
          },
          "tenant": {
            "$ref": "#/components/schemas/v1Tenant"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1GetProviderResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/v1Provider"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1GetRegistryRepoTagResponse": {
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/v1RegistryRepoTag"
          }
        },
        "type": "object"
      },
      "v1GetRepoResponse": {
        "properties": {
          "repo": {
            "$ref": "#/components/schemas/v1Repo"
          }
        },
        "type": "object"
      },
      "v1InfoResponse": {
        "properties": {
          "build": {
            "$ref": "#/components/schemas/v1BuildInfo"
          },
          "system": {
            "$ref": "#/components/schemas/v1SystemInfo"
          },
          "version": {
            "$ref": "#/components/schemas/v1VersionInfo"
          }
        },
        "type": "object"
      },
      "v1Invite": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invited_by": {
            "type": "string"
          },
          "responded_at": {
            "format": "date-time",
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/v1InviteStatus"
          }
        },
        "type": "object"
      },
      "v1InviteStatus": {
        "default": "INVITE_STATUS_UNKNOWN",
        "enum": [
          "INVITE_STATUS_UNKNOWN",
          "INVITE_STATUS_ACCEPTED",
          "INVITE_STATUS_DECLINED",
          "INVITE_STATUS_EXPIRED",
          "INVITE_STATUS_CANCELED",
          "INVITE_STATUS_ACTIVE"
        ],
        "type": "string"
      },
      "v1InviteUserRequest": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1InviteUserResponse": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1IsRepoConnectedResponse": {
        "properties": {
          "connected": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "v1ListConnectionsResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/v1Connection"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListInvitesResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/v1TenantInvite"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListOrgResponse": {
        "properties": {
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/v1SccOrg"
            },
            "type": "array"
          },
          "orgs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListOrgsResponse": {
        "properties": {
          "orgs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/v1PaginationResponse"
          }
        },
        "type": "object"
      },
      "v1ListPolicyBuildersResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/v1PolicyBuilder"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListPolicyRefsResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/v1PolicyRef"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListProviderKindsResponse": {
        "properties": {
          "results": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListProvidersResponse": {
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/v1Provider"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListRegistryRepoDigestsResponse": {
        "properties": {
          "digests": {
            "items": {
              "$ref": "#/components/schemas/v1RegistryRepoDigest"
            },
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/v1PaginationResponse"
          }
        },
        "type": "object"
      },
      "v1ListRegistryRepoTagsResponse": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/v1PaginationResponse"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/v1RegistryRepoTag"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListRegistryReposResponse": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/v1PaginationResponse"
          },
          "registry_repos": {
            "items": {
              "$ref": "#/components/schemas/v1RegistryRepo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListRepoResponse": {
        "properties": {
          "repos": {
            "items": {
              "$ref": "#/components/schemas/v1Repo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1ListTemplatesResponse": {
        "properties": {
          "repos": {
            "items": {
              "$ref": "#/components/schemas/v1Repo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1Metadata": {
        "properties": {
          "connection_id": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1NameAvailability": {
        "default": "NAME_AVAILABILITY_UNKNOWN",
        "enum": [
          "NAME_AVAILABILITY_UNKNOWN",
          "NAME_AVAILABILITY_AVAILABLE",
          "NAME_AVAILABILITY_UNAVAILABLE",
          "NAME_AVAILABILITY_INVALID",
          "NAME_AVAILABILITY_PROFANE",
          "NAME_AVAILABILITY_RESERVED"
        ],
        "type": "string"
      },
      "v1OPAConfig": {
        "properties": {
          "discovery": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "v1OPADiscoveryResponse": {
        "properties": {
          "opa": {
            "$ref": "#/components/schemas/v1OPAConfig"
          }
        },
        "type": "object"
      },
      "v1OPAInstanceDiscoveryResponse": {
        "properties": {
          "opa": {
            "$ref": "#/components/schemas/v1OPAConfig"
          }
        },
        "type": "object"
      },
      "v1PaginationRequest": {
        "properties": {
          "size": {
            "format": "int32",
            "type": "integer"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1PaginationResponse": {
        "properties": {
          "next_token": {
            "type": "string"
          },
          "result_size": {
            "format": "int32",
            "type": "integer"
          },
          "total_size": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "v1PolicyBuilder": {
        "properties": {
          "id": {
            "type": "string"
          },
          "registry_connection_id": {
            "type": "string"
          },
          "registry_org": {
            "type": "string"
          },
          "registry_repo": {
            "type": "string"
          },
          "scc_connection_id": {
            "title": "Configuration for source code",
            "type": "string"
          },
          "scc_org": {
            "type": "string"
          },
          "scc_repo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1PolicyRef": {
        "properties": {
          "connection_id": {
            "type": "string"
          },
          "decision_logging": {
            "title": "Configuration for enabling/disabling decision logging",
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "registry_connection_id": {
            "title": "Configuration for linking a policy image from an OCI registry to a policy ref",
            "type": "string"
          },
          "registry_image": {
            "type": "string"
          },
          "registry_org": {
            "type": "string"
          },
          "registry_tag": {
            "type": "string"
          },
          "source_name": {
            "type": "string"
          },
          "source_url": {
            "title": "Configuration for policy source code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Provider": {
        "properties": {
          "config": {
            "items": {
              "$ref": "#/components/schemas/v1ConfigElement"
            },
            "type": "array"
          },
          "connection_type": {
            "$ref": "#/components/schemas/v1ConnectionType"
          },
          "description": {
            "type": "string"
          },
          "display_attributes": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "$ref": "#/components/schemas/v1ProviderKind"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1ProviderKind": {
        "default": "PROVIDER_KIND_UNKNOWN",
        "enum": [
          "PROVIDER_KIND_UNKNOWN",
          "PROVIDER_KIND_IDP",
          "PROVIDER_KIND_SCC",
          "PROVIDER_KIND_POLICY_REGISTRY",
          "PROVIDER_KIND_AUTHORIZER",
          "PROVIDER_KIND_DECISION_LOGS",
          "PROVIDER_KIND_DIRECTORY",
          "PROVIDER_KIND_DISCOVERY",
          "PROVIDER_KIND_EDGE_AUTHORIZER",
          "PROVIDER_KIND_DATA"
        ],
        "type": "string"
      },
      "v1RegistryRepo": {
        "properties": {
          "name": {
            "type": "string"
          },
          "org": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1RegistryRepoAnnotation": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1RegistryRepoAvailableResponse": {
        "properties": {
          "availability": {
            "$ref": "#/components/schemas/v1NameAvailability"
          },
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1RegistryRepoDigest": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1RegistryRepoTag": {
        "properties": {
          "annotations": {
            "items": {
              "$ref": "#/components/schemas/v1RegistryRepoAnnotation"
            },
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1RemoveMemberResponse": {
        "type": "object"
      },
      "v1Repo": {
        "properties": {
          "ci_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "org": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1RespondToInviteResponse": {
        "type": "object"
      },
      "v1RotateSecretResponse": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/v1Connection"
          }
        },
        "type": "object"
      },
      "v1SccOrg": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1SignupAccountRequest": {
        "properties": {
          "email": {
            "type": "string"
          },
          "recaptcha": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1SignupAccountResponse": {
        "type": "object"
      },
      "v1SystemInfo": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "instance_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Tenant": {
        "properties": {
          "connections": {
            "items": {
              "$ref": "#/components/schemas/v1Connection"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "max_hosted_instances": {
            "format": "int32",
            "type": "integer"
          },
          "members": {
            "items": {
              "$ref": "#/components/schemas/v1TenantMember"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "personal": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "v1TenantAvailability": {
        "default": "TENANT_AVAILABILITY_UNKNOWN",
        "enum": [
          "TENANT_AVAILABILITY_UNKNOWN",
          "TENANT_AVAILABILITY_AVAILABLE",
          "TENANT_AVAILABILITY_UNAVAILABLE",
          "TENANT_AVAILABILITY_INVALID",
          "TENANT_AVAILABILITY_PROFANE",
          "TENANT_AVAILABILITY_RESERVED",
          "TENANT_AVAILABILITY_MARKED_DELETED"
        ],
        "type": "string"
      },
      "v1TenantAvailableResponse": {
        "properties": {
          "availability": {
            "$ref": "#/components/schemas/v1TenantAvailability"
          },
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1TenantInvite": {
        "properties": {
          "invite": {
            "$ref": "#/components/schemas/v1Invite"
          },
          "tenant": {
            "$ref": "#/components/schemas/v1Tenant"
          }
        },
        "type": "object"
      },
      "v1TenantMember": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1UpdateAccountResponse": {
        "type": "object"
      },
      "v1UpdateConnectionResponse": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1UpdatePolicyRefResponse": {
        "properties": {
          "results": {}
        },
        "type": "object"
      },
      "v1ValidPolicyRegistryRepoTagResponse": {
        "type": "object"
      },
      "v1VerifyConnectionResponse": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/rpcStatus"
          }
        },
        "type": "object"
      },
      "v1VersionInfo": {
        "properties": {
          "schema": {
            "type": "string"
          },
          "system": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "v2CreateInstanceResponse": {
        "properties": {
          "instance": {
            "$ref": "#/components/schemas/v2Instance"
          }
        },
        "type": "object"
      },
      "v2CreatePolicyResponse": {
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/v2Policy"
          }
        },
        "type": "object"
      },
      "v2CreateRepositoryResponse": {
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/v2Repository"
          }
        },
        "type": "object"
      },
      "v2CreateSourceResponse": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/v2Source"
          }
        },
        "type": "object"
      },
      "v2DeleteAccountResponse": {
        "type": "object"
      },
      "v2DeleteInstanceResponse": {
        "type": "object"
      },
      "v2DeletePolicyResponse": {
        "type": "object"
      },
      "v2DeleteRepositoryResponse": {
        "type": "object"
      },
      "v2DeleteSourceResponse": {
        "type": "object"
      },
      "v2DeleteTenantResponse": {
        "type": "object"
      },
      "v2GetPolicyResponse": {
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/v2Policy"
          }
        },
        "type": "object"
      },
      "v2GetPolicyStateResponse": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/v2PolicyState"
          }
        },
        "type": "object"
      },
      "v2GetRepositoryResponse": {
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/v2Repository"
          }
        },
        "type": "object"
      },
      "v2GetSourceResponse": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/v2Source"
          }
        },
        "type": "object"
      },
      "v2Instance": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "decision_logging": {
            "type": "boolean"
          },
          "instance_type": {
            "$ref": "#/components/schemas/v2InstanceType"
          },
          "label": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "version_hash": {
            "type": "string"
          }
        },
        "required": [
          "label",
          "tag",
          "instance_type"
        ],
        "type": "object"
      },
      "v2InstanceType": {
        "default": "INSTANCE_TYPE_UNKNOWN",
        "enum": [
          "INSTANCE_TYPE_UNKNOWN",
          "INSTANCE_TYPE_HOSTED",
          "INSTANCE_TYPE_EDGE_AUTHORIZER"
        ],
        "type": "string"
      },
      "v2ListInstanceResponse": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/v1PaginationResponse"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/v2Instance"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v2ListPolicyFilter": {
        "properties": {
          "name_equals": {
            "type": "string"
          },
          "name_starts_with": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v2ListPolicyResponse": {
        "properties": {
          "page": {
            "$ref": "#/components/schemas/v1PaginationResponse"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/v2Policy"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v2Policy": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "version_hash": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "v2PolicyNameAvailableResponse": {
        "properties": {
          "availability": {
            "$ref": "#/components/schemas/v1NameAvailability"
          },
          "reason": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v2PolicyState": {
        "properties": {
          "instance": {
            "items": {
              "$ref": "#/components/schemas/v2Instance"
            },
            "type": "array"
          },
          "policy": {
            "$ref": "#/components/schemas/v2Policy"
          },
          "repository": {
            "$ref": "#/components/schemas/v2Repository"
          },
          "source": {
            "$ref": "#/components/schemas/v2Source"
          }
        },
        "type": "object"
      },
      "v2Repository": {
        "properties": {
          "connection_id": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "org": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "version_hash": {
            "type": "string"
          }
        },
        "required": [
          "connection_id",
          "org",
          "repo"
        ],
        "type": "object"
      },
      "v2SetPolicyStateResponse": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/v2PolicyState"
          }
        },
        "type": "object"
      },
      "v2Source": {
        "properties": {
          "connection_id": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "org": {
            "type": "string"
          },
          "policy_id": {
            "type": "string"
          },
          "repo": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "version_hash": {
            "type": "string"
          }
        },
        "required": [
          "connection_id",
          "org",
          "repo"
        ],
        "type": "object"
      },
      "v2UpdateInstanceResponse": {
        "properties": {
          "instance": {
            "$ref": "#/components/schemas/v2Instance"
          }
        },
        "type": "object"
      },
      "v2UpdatePolicyResponse": {
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/v2Policy"
          }
        },
        "type": "object"
      },
      "v2UpdateRepositoryResponse": {
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/v2Repository"
          }
        },
        "type": "object"
      },
      "v2UpdateSourceResponse": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/v2Source"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "JWT": {
        "bearerFormat": "JWT",
        "description": "Aserto JWT token",
        "scheme": "bearer",
        "type": "http"
      },
      "TenantID": {
        "description": "Aserto Tenant ID",
        "in": "header",
        "name": "aserto-tenant-id",
        "type": "apiKey"
      }
    }
  },
  "externalDocs": {
    "description": "API documentation",
    "url": "https://docs.aserto.com"
  },
  "info": {
    "contact": {
      "email": "support@aserto.com",
      "name": "API Support",
      "url": "https://aserto.com/support"
    },
    "description": "Tenant service",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "https://aserto.com/terms/",
    "title": "Tenant",
    "version": "v0.8.88"
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/v1/account": {
      "get": {
        "description": "Returns account information of given user identity: account id, tenant membership and default tenant id.",
        "operationId": "account.get_account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1GetAccountResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Get account info",
        "tags": [
          "account"
        ]
      },
      "post": {
        "description": "Update account information of given user identity.",
        "operationId": "account.update_account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1Account"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1UpdateAccountResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Update account",
        "tags": [
          "account"
        ]
      }
    },
    "/api/v1/account/invites": {
      "get": {
        "description": "Returns tenant invitations collection for given user identity.",
        "operationId": "account.list_invites",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListInvitesResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "List invites",
        "tags": [
          "account"
        ]
      }
    },
    "/api/v1/account/signup": {
      "post": {
        "description": "Sign up for an Aserto account with the given email address.",
        "operationId": "account.signup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1SignupAccountRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1SignupAccountResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [],
        "summary": "Signup account request",
        "tags": [
          "signup"
        ]
      }
    },
    "/api/v1/discovery/{policy_name}/{instance_label}/opa": {
      "get": {
        "description": "Calculates a json configuration file to be used by OPA's discovery plugin.",
        "operationId": "policy.opa_instance_discovery",
        "parameters": [
          {
            "in": "path",
            "name": "policy_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "instance_label",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1OPAInstanceDiscoveryResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "OPA discovery configuration for the instance.",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v1/info": {
      "get": {
        "description": "Return endpoint versio information.",
        "operationId": "info.info",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1InfoResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [],
        "summary": "Info endpoint",
        "tags": [
          "info"
        ]
      }
    },
    "/api/v1/onboarding/available/{name}": {
      "get": {
        "description": "Verifies if given tenant name is available.",
        "operationId": "onboarding.tenant_available",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1TenantAvailableResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Tenant availability check",
        "tags": [
          "onboarding"
        ]
      }
    },
    "/api/v1/onboarding/claim": {
      "post": {
        "description": "Claim tenant name.",
        "operationId": "onboarding.claim_tenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1ClaimTenantRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ClaimTenantResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Claim tenant",
        "tags": [
          "onboarding"
        ]
      }
    },
    "/api/v1/onboarding/invites": {
      "post": {
        "description": "Invite user to join aserto.",
        "operationId": "onboarding.invite_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1InviteUserRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1InviteUserResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Invite user",
        "tags": [
          "onboarding"
        ]
      }
    },
    "/api/v1/providers": {
      "get": {
        "description": "Returns the collection of providers.",
        "operationId": "provider.list_providers",
        "parameters": [
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "default": "PROVIDER_KIND_UNKNOWN",
              "enum": [
                "PROVIDER_KIND_UNKNOWN",
                "PROVIDER_KIND_IDP",
                "PROVIDER_KIND_SCC",
                "PROVIDER_KIND_POLICY_REGISTRY",
                "PROVIDER_KIND_AUTHORIZER",
                "PROVIDER_KIND_DECISION_LOGS",
                "PROVIDER_KIND_DIRECTORY",
                "PROVIDER_KIND_DISCOVERY",
                "PROVIDER_KIND_EDGE_AUTHORIZER",
                "PROVIDER_KIND_DATA"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListProvidersResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "List providers",
        "tags": [
          "provider"
        ]
      }
    },
    "/api/v1/providers/kinds": {
      "get": {
        "description": "Returns the collection of provider kinds (types).",
        "operationId": "provider.list_provider_kinds",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListProviderKindsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "List provider kinds",
        "tags": [
          "provider"
        ]
      }
    },
    "/api/v1/providers/{id}": {
      "get": {
        "description": "Returns the meta describing of a provider.",
        "operationId": "provider.get_provider",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "default": "PROVIDER_KIND_UNKNOWN",
              "enum": [
                "PROVIDER_KIND_UNKNOWN",
                "PROVIDER_KIND_IDP",
                "PROVIDER_KIND_SCC",
                "PROVIDER_KIND_POLICY_REGISTRY",
                "PROVIDER_KIND_AUTHORIZER",
                "PROVIDER_KIND_DECISION_LOGS",
                "PROVIDER_KIND_DIRECTORY",
                "PROVIDER_KIND_DISCOVERY",
                "PROVIDER_KIND_EDGE_AUTHORIZER",
                "PROVIDER_KIND_DATA"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1GetProviderResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Get provider",
        "tags": [
          "provider"
        ]
      }
    },
    "/api/v1/registry/{connection_id}": {
      "get": {
        "description": "Lists all organizations available for a connection.",
        "operationId": "registry.list_orgs",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page.size",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page.token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListOrgsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List all organizations",
        "tags": [
          "registry"
        ]
      },
      "post": {
        "description": "Create an empty registry repository for a given registry connection instance.",
        "operationId": "registry.create_registry_repo",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "repo": {
                    "$ref": "#/components/schemas/v1RegistryRepo"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1CreateRegistryRepoResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Create a registry repo.",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/registry/{connection_id}/available/{repo.org}/{repo.name}": {
      "get": {
        "description": "Verifies if given RegistryRepo is available.",
        "operationId": "registry.registry_repo_available",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RegistryRepoAvailableResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "RegistryRepo availability check",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/registry/{connection_id}/clone": {
      "post": {
        "description": "Clones a repository from one registry to another.",
        "operationId": "registry.clone_repo",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "destination_connection_id": {
                    "type": "string"
                  },
                  "destination_org": {
                    "type": "string"
                  },
                  "destination_repo": {
                    "type": "string"
                  },
                  "destination_tag": {
                    "type": "string"
                  },
                  "source_org": {
                    "type": "string"
                  },
                  "source_repo": {
                    "type": "string"
                  },
                  "source_tag": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1CloneRepoResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Clones a repository",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/registry/{connection_id}/{org}": {
      "get": {
        "description": "Returns a list of RegistryRepo for a given registry connection and organization name.",
        "operationId": "registry.list_registry_repos",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page.size",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page.token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListRegistryReposResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List repos for an org.",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}": {
      "delete": {
        "description": "Deletes a repository, including all its tags and images.",
        "operationId": "registry.delete_registry_repo",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1DeleteRegistryRepoResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Delete a repository.",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}/digests": {
      "get": {
        "description": "Returns an array of digests for a registry repository.",
        "operationId": "registry.list_digests",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page.size",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page.token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deep",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListRegistryRepoDigestsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List repository digests.",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}/tags": {
      "get": {
        "description": "Returns an array of tags for a registry repository.",
        "operationId": "registry.list_tags",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page.size",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page.token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "deep",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListRegistryRepoTagsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List repository tags.",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}/tags/{tag}": {
      "get": {
        "description": "Returns a tag object with information about the tag.",
        "operationId": "registry.get_tag",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1GetRegistryRepoTagResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Get repository tag details.",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/registry/{connection_id}/{repo.org}/{repo.name}/tags/{tag}/valid_policy": {
      "get": {
        "description": "Verifies if given tag is a valid policy.",
        "operationId": "registry.registry_is_valid_tag",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo.name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ValidPolicyRegistryRepoTagResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Tag validity check",
        "tags": [
          "registry"
        ]
      }
    },
    "/api/v1/tenant/connections": {
      "get": {
        "description": "Returns the collection of connections for given tenant.",
        "operationId": "connection.list_connections",
        "parameters": [
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "default": "PROVIDER_KIND_UNKNOWN",
              "enum": [
                "PROVIDER_KIND_UNKNOWN",
                "PROVIDER_KIND_IDP",
                "PROVIDER_KIND_SCC",
                "PROVIDER_KIND_POLICY_REGISTRY",
                "PROVIDER_KIND_AUTHORIZER",
                "PROVIDER_KIND_DECISION_LOGS",
                "PROVIDER_KIND_DIRECTORY",
                "PROVIDER_KIND_DISCOVERY",
                "PROVIDER_KIND_EDGE_AUTHORIZER",
                "PROVIDER_KIND_DATA"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListConnectionsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List connections",
        "tags": [
          "connection"
        ]
      },
      "post": {
        "description": "Creates a new connection instance of a given connection kind.",
        "operationId": "connection.create_connection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1Connection"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1CreateConnectionResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Create connection",
        "tags": [
          "connection"
        ]
      }
    },
    "/api/v1/tenant/connections/available/{name}": {
      "get": {
        "description": "Verifies if given connection name is available.",
        "operationId": "connection.connection_available",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ConnectionAvailableResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Connection availability check",
        "tags": [
          "connection"
        ]
      }
    },
    "/api/v1/tenant/connections/{connection.id}": {
      "put": {
        "description": "Update existing connection definition for the given connection id.",
        "operationId": "connection.update_connection",
        "parameters": [
          {
            "in": "path",
            "name": "connection.id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1Connection"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1UpdateConnectionResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Update connection",
        "tags": [
          "connection"
        ]
      }
    },
    "/api/v1/tenant/connections/{id}": {
      "delete": {
        "description": "Removes the connection definition for the given connection id.",
        "operationId": "connection.delete_connection",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1DeleteConnectionResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Delete connection",
        "tags": [
          "connection"
        ]
      },
      "get": {
        "description": "Returns the connection definition for the given connection id.",
        "operationId": "connection.get_connection",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1GetConnectionResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Get connection",
        "tags": [
          "connection"
        ]
      }
    },
    "/api/v1/tenant/connections/{id}/verify": {
      "post": {
        "description": "Verifiy the configuration settings for the given connection id.",
        "operationId": "connection.verify_connection",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1VerifyConnectionResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Verify connection",
        "tags": [
          "connection"
        ]
      }
    },
    "/api/v1/tenant/connections/{id}/{secret_key}/rotate": {
      "put": {
        "description": "Rotate a generated secret value.",
        "operationId": "connection.rotate_secret",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "secret_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RotateSecretResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Rotate connection secret",
        "tags": [
          "connection"
        ]
      }
    },
    "/api/v1/tenant/policies": {
      "get": {
        "description": "List policy references.",
        "operationId": "policy.list_policy_references",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListPolicyRefsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List policy references (DEPRECATED).",
        "tags": [
          "policy"
        ]
      },
      "post": {
        "description": "Create policy reference.",
        "operationId": "policy.create_policy_reference",
        "parameters": [
          {
            "in": "query",
            "name": "force_reconnect",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1PolicyRef"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1CreatePolicyRefResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Create policy reference (DEPRECATED).",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v1/tenant/policies/{id}": {
      "delete": {
        "description": "Remove policy reference.",
        "operationId": "policy.delete_policy_reference",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1DeletePolicyRefResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Remove policy reference (DEPRECATED).",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v1/tenant/policies/{policy_id}/opa/discovery": {
      "get": {
        "description": "Calculates a json configuration file to be used by OPA's discovery plugin.",
        "operationId": "policy.opa_discovery",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "use_tags",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1OPADiscoveryResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "OPA discovery configuration for the policy (DEPRECATED).",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v1/tenant/policies/{policy_ref.id}": {
      "patch": {
        "description": "Update a policy reference.",
        "operationId": "policy.update_policy_reference",
        "parameters": [
          {
            "in": "path",
            "name": "policy_ref.id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "update_mask.mask",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1PolicyRef"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1UpdatePolicyRefResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Update a policy reference (DEPRECATED).",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v1/tenant/policybuilder": {
      "get": {
        "description": "List policy builders",
        "operationId": "policy.list_policy_builders",
        "parameters": [
          {
            "in": "query",
            "name": "registry_repo",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "registry_org",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListPolicyBuildersResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List policy builders (DEPRECATED).",
        "tags": [
          "policy builder"
        ]
      },
      "post": {
        "description": "Create policy builder.",
        "operationId": "policy.create_policy_builder",
        "parameters": [
          {
            "in": "query",
            "name": "force_reconnect",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "workflow_file_name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1PolicyBuilder"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1CreatePolicyBuilderResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Create policy builder (DEPRECATED).",
        "tags": [
          "policy builder"
        ]
      }
    },
    "/api/v1/tenant/policybuilder/{id}": {
      "delete": {
        "description": "Remove policy builder.",
        "operationId": "policy.delete_policy_builder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1DeletePolicyBuilderResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Remove policy builder (DEPRECATED).",
        "tags": [
          "policy builder"
        ]
      }
    },
    "/api/v1/tenant/profile": {
      "get": {
        "description": "Returns the tenant profile.",
        "operationId": "profile.get_profile",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1GetProfileResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Get tenant profile",
        "tags": [
          "profile"
        ]
      }
    },
    "/api/v1/tenant/profile/invites": {
      "get": {
        "description": "Returns collection of invitation for given tenant.",
        "operationId": "profile.get_invites",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1GetInvitesResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Get invites",
        "tags": [
          "profile"
        ]
      },
      "post": {
        "description": "Invite user to tenant.",
        "operationId": "profile.invite_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1InviteUserRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1InviteUserResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Invite user to tenant",
        "tags": [
          "profile"
        ]
      }
    },
    "/api/v1/tenant/profile/invites/{id}": {
      "post": {
        "description": "Respond to tenant invitation.",
        "operationId": "profile.respond_to_invite",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/v1InviteStatus"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RespondToInviteResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Respond to tenant invite",
        "tags": [
          "profile"
        ]
      }
    },
    "/api/v1/tenant/profile/members/{account_id}": {
      "delete": {
        "description": "Remove member from tenant.",
        "operationId": "profile.remove_member",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RemoveMemberResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Remove member",
        "tags": [
          "profile"
        ]
      }
    },
    "/api/v1/tenant/scc/{connection_id}/orgs": {
      "get": {
        "description": "Returns the collection organizations for a given SCC connection.",
        "operationId": "scc.list_orgs",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListOrgResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List organizations",
        "tags": [
          "scc"
        ]
      }
    },
    "/api/v1/tenant/scc/{connection_id}/profile": {
      "get": {
        "description": "Returns profile information for a given SCC connection instance.",
        "operationId": "scc.get_profile",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1GetProfileResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Get profile",
        "tags": [
          "scc"
        ]
      }
    },
    "/api/v1/tenant/scc/{connection_id}/repos/{org}": {
      "get": {
        "description": "Returns the collection repostories for a given SCC connection instance.",
        "operationId": "scc.list_repos",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListRepoResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List repositories",
        "tags": [
          "scc"
        ]
      },
      "post": {
        "description": "Create a new source repository instance for a given connection instance.",
        "operationId": "scc.create_repo",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1CreateRepoResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Create repository",
        "tags": [
          "scc"
        ]
      }
    },
    "/api/v1/tenant/scc/{connection_id}/repos/{org}/{name}": {
      "get": {
        "description": "Gets details for a source code repository.",
        "operationId": "scc.get_repo",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1GetRepoResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Get repository",
        "tags": [
          "scc"
        ]
      }
    },
    "/api/v1/tenant/scc/{connection_id}/repos/{org}/{repo}/connected": {
      "get": {
        "description": "Verify if the given repository is connected.",
        "operationId": "scc.is_repo_connected",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1IsRepoConnectedResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Is repository connected check",
        "tags": [
          "scc"
        ]
      }
    },
    "/api/v1/tenant/scc/{connection_id}/templates": {
      "get": {
        "description": "Returns the collection template repostories for a given SCC connection instance.",
        "operationId": "scc.list_templates",
        "parameters": [
          {
            "in": "path",
            "name": "connection_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ListTemplatesResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List templates",
        "tags": [
          "scc"
        ]
      }
    },
    "/api/v2/accounts": {
      "delete": {
        "description": "Delete account.",
        "operationId": "tenant.delete_account",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2DeleteAccountResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "summary": "Delete account.",
        "tags": [
          "account"
        ]
      }
    },
    "/api/v2/policies": {
      "get": {
        "description": "List policies.",
        "operationId": "policy.list_policy",
        "parameters": [
          {
            "in": "query",
            "name": "page.size",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page.token",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter.name_starts_with",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter.name_equals",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2ListPolicyResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "List polices",
        "tags": [
          "policy"
        ]
      },
      "post": {
        "description": "Create a policy.",
        "operationId": "policy.create_policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v2Policy"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2CreatePolicyResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Create a policy.",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v2/policies/available/{name}": {
      "get": {
        "description": "Verifies if given policy name is available.",
        "operationId": "policy.policy_available",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2PolicyNameAvailableResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Policy availability check",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v2/policies/{id}": {
      "delete": {
        "description": "Remove policy.",
        "operationId": "policy.delete_policy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2DeletePolicyResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Remove policy.",
        "tags": [
          "policy"
        ]
      },
      "get": {
        "description": "Get policy by its ID.",
        "operationId": "policy.get_policy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2GetPolicyResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Get policy by ID",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v2/policies/{policy.id}": {
      "patch": {
        "description": "Update a policy.",
        "operationId": "policy.update_policy",
        "parameters": [
          {
            "in": "path",
            "name": "policy.id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "fields.mask",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v2Policy"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2UpdatePolicyResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Update a policy.",
        "tags": [
          "policy"
        ]
      }
    },
    "/api/v2/policystate": {
      "put": {
        "description": "Set policy state by its ID.",
        "operationId": "policystate.set_policy_state",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v2PolicyState"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2SetPolicyStateResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Set policy state by ID",
        "tags": [
          "policystate"
        ]
      }
    },
    "/api/v2/policystate/{policy_id}": {
      "get": {
        "description": "Get policy state by its ID.",
        "operationId": "policystate.get_policy_state",
        "parameters": [
          {
            "in": "path",
            "name": "policy_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2GetPolicyStateResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Get policy state by ID",
        "tags": [
          "policystate"
        ]
      }
    },
    "/api/v2/tenants": {
      "delete": {
        "description": "Delete tenant.",
        "operationId": "tenant.delete_tenant",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v2DeleteTenantResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rpcStatus"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "security": [
          {
            "JWT": [],
            "TenantID": []
          }
        ],
        "summary": "Delete tenant.",
        "tags": [
          "tenant"
        ]
      }
    }
  },
  "security": [
    {
      "JWT": []
    }
  ],
  "servers": [
    {
      "description": "Tenant service",
      "url": "https://tenant.prod.aserto.com"
    }
  ],
  "tags": [
    {
      "name": "Info"
    }
  ]
}
